{"ast":null,"code":"import _slicedToArray from \"C:/Users/Rick/OneDrive/Lambda School/LambdaCode/Web45/Unit2/U2W2/Module1/1Warmup/Objective3/sandBoxWork/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Rick\\\\OneDrive\\\\Lambda School\\\\LambdaCode\\\\Web45\\\\Unit2\\\\U2W2\\\\Module1\\\\1Warmup\\\\Objective3\\\\sandBoxWork\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\n// import { StrictMode } from \"react\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\"; // import App from \"./App\";\n//bulb should have a slice of state called \"isBulbOn\"\n// isBulbOn can have one of two values: true or false.\n//isBulbOn should start out as false. IMO\n// bulb needs a \"state setter\", a fuction called \"setIsBulbOn\"\n// setIsBulbOn(true) --> isBulbOn changes state to be true\n// setIsbulb(false) --> isBulbOn changes state to be false\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Bulb() {\n  _s();\n\n  // old syntax\n  // const something = useState(false);\n  // const isBulbOn = something[0];\n  // const setIsBulbOn = something[1];\n  // new syntax\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isBulbOn = _useState2[0],\n      setIsBulbOn = _useState2[1];\n\n  setTimeout(function () {\n    setIsBulbOn(!isBulbOn);\n  }, 1000);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this); // if (isBulbOn) {\n  //   return <div>The lightbulb is ON</div>\n  // }\n  // return <div>The lighbulb is OFF</div>\n}\n\n_s(Bulb, \"rrwl8il9ubW0ZyUnrK8mFVcLUpY=\");\n\n_c = Bulb;\nvar rootElement = document.getElementById(\"root\");\nReactDOM.render(\n/*#__PURE__*/\n// <StrictMode>\n//   <App />\n// </StrictMode>\n_jsxDEV(Bulb, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 36,\n  columnNumber: 3\n}, this), rootElement);\n\nvar _c;\n\n$RefreshReg$(_c, \"Bulb\");","map":{"version":3,"sources":["C:/Users/Rick/OneDrive/Lambda School/LambdaCode/Web45/Unit2/U2W2/Module1/1Warmup/Objective3/sandBoxWork/src/index.js"],"names":["React","useState","ReactDOM","Bulb","isBulbOn","setIsBulbOn","setTimeout","rootElement","document","getElementById","render"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,cAAP,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,IAAT,GAAgB;AAAA;;AACd;AACA;AACA;AACA;AACA;AACA,kBAAgCF,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOG,QAAP;AAAA,MAAiBC,WAAjB;;AACAC,EAAAA,UAAU,CAAC,YAAM;AACfD,IAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACD,GAFS,EAEP,IAFO,CAAV;AAGA,sBAAO;AAAA;AAAA;AAAA;AAAA,UAAP,CAVc,CAWd;AACA;AACA;AACA;AACD;;GAfQD,I;;KAAAA,I;AAiBT,IAAMI,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB;AACAP,QAAQ,CAACQ,MAAT;AAAA;AACE;AACA;AACA;AACA,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QAJF,EAMEH,WANF","sourcesContent":["// import { StrictMode } from \"react\";\nimport React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles.css\"\n// import App from \"./App\";\n\n//bulb should have a slice of state called \"isBulbOn\"\n// isBulbOn can have one of two values: true or false.\n//isBulbOn should start out as false. IMO\n// bulb needs a \"state setter\", a fuction called \"setIsBulbOn\"\n// setIsBulbOn(true) --> isBulbOn changes state to be true\n// setIsbulb(false) --> isBulbOn changes state to be false\n\nfunction Bulb() {\n  // old syntax\n  // const something = useState(false);\n  // const isBulbOn = something[0];\n  // const setIsBulbOn = something[1];\n  // new syntax\n  const [isBulbOn, setIsBulbOn] = useState(false);\n  setTimeout(() => {\n    setIsBulbOn(!isBulbOn)\n  }, 1000)\n  return <div></div>\n  // if (isBulbOn) {\n  //   return <div>The lightbulb is ON</div>\n  // }\n  // return <div>The lighbulb is OFF</div>\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  // <StrictMode>\n  //   <App />\n  // </StrictMode>\n  <Bulb />\n  ,\n  rootElement\n);\n"]},"metadata":{},"sourceType":"module"}